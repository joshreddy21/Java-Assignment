****Write a function to add integer values of an array.****
public class ArraySum {
    public static int sumArray(int[] arr) {
        int sum = 0;
        
        for (int num : arr) {
            sum += num;
        }
        
        return sum;
    }

    public static void main(String[] args) {
        // Example usage:
        int[] myArray = {1, 2, 3, 4, 5};
        int result = sumArray(myArray);
        System.out.println("The sum of the array " + java.util.Arrays.toString(myArray) + " is: " + result);
    }
}
***** Write a function to calculate the average value of an array of integers ***
public class ArrayAverage {
    public static double calculateAverage(int[] arr) {
        if (arr == null || arr.length == 0) {
            throw new IllegalArgumentException("Array is empty or null");
        }

        int sum = 0;
        for (int num : arr) {
            sum += num;
        }

        return (double) sum / arr.length;
    }

    public static void main(String[] args) {
        // Example usage:
        int[] myArray = {1, 2, 3, 4, 5};
        double average = calculateAverage(myArray);
        System.out.println("The average of the array " + java.util.Arrays.toString(myArray) + " is: " + average);
    }
}


****Write a program to find the index of an array element.***
public class FindElementIndex {
    public static int findIndex(int[] arr, int target) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == target) {
                return i;
            }
        }
        // If the target element is not found, return -1
        return -1;
    }

    public static void main(String[] args) {
        // Example usage:
        int[] myArray = {1, 2, 3, 4, 5};
        int targetElement = 3;

        int index = findIndex(myArray, targetElement);

        if (index != -1) {
            System.out.println("The index of " + targetElement + " in the array is: " + index);
        } else {
            System.out.println(targetElement + " is not present in the array.");
        }
    }
}

****Write a function to test if array contains a specific value.****
public class FindElementIndex {
    public static int findIndex(int[] arr, int target) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == target) {
                return i;
            }
        }
        // If the target element is not found, return -1
        return -1;
    }

    public static void main(String[] args) {
        // Example usage:
        int[] myArray = {1, 2, 3, 4, 5};
        int targetElement = 5;

        int index = findIndex(myArray, targetElement);

        if (index != -1) {
            System.out.println("The index of " + targetElement + " in the array is: " + index);
        } else {
            System.out.println(targetElement + " is not present in the array.");
        }
    }
}

***Write a function to remove a specific element from an array.***
import java.util.Arrays;

public class RemoveElementFromArray {
    public static int[] removeElement(int[] arr, int target) {
        int indexToRemove = -1;

        // Find the index of the target element
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == target) {
                indexToRemove = i;
                break;
            }
        }

        // If the target element is found, remove it
        if (indexToRemove != -1) {
            int[] newArr = new int[arr.length - 1];
            System.arraycopy(arr, 0, newArr, 0, indexToRemove);
            System.arraycopy(arr, indexToRemove + 1, newArr, indexToRemove, arr.length - indexToRemove - 1);
            return newArr;
        } else {
            // If the target element is not found, return the original array
            return arr;
        }
    }

    public static void main(String[] args) {
        // Example usage:
        int[] myArray = {1, 2, 3, 4, 5};
        int elementToRemove = 3;

        int[] newArray = removeElement(myArray, elementToRemove);

        System.out.println("Original array: " + Arrays.toString(myArray));
        System.out.println("Array after removing " + elementToRemove + ": " + Arrays.toString(newArray));
    }
}


***Write a function to copy an array to another array.***
import java.util.Arrays;

public class CopyArray {
    public static int[] copyArray(int[] sourceArray) {
        int[] destinationArray = new int[sourceArray.length];
        System.arraycopy(sourceArray, 0, destinationArray, 0, sourceArray.length);
        return destinationArray;
    }

    public static void main(String[] args) {
        // Example usage:
        int[] originalArray = {1, 2, 3, 4, 5};

        // Copy the array
        int[] newArray = copyArray(originalArray);

        System.out.println("Original array: " + Arrays.toString(originalArray));
        System.out.println("Copied array: " + Arrays.toString(newArray));
    }
}

****Write a function to insert an element at a specific position in the array.*****
import java.util.Arrays;

public class InsertElementToArray {
    public static int[] insertElement(int[] arr, int element, int position) {
        if (position < 0 || position > arr.length) {
            throw new IllegalArgumentException("Invalid position");
        }

        int[] newArray = new int[arr.length + 1];

        // Copy elements before the specified position
        System.arraycopy(arr, 0, newArray, 0, position);

        // Insert the new element
        newArray[position] = element;

        // Copy elements after the specified position
        System.arraycopy(arr, position, newArray, position + 1, arr.length - position);

        return newArray;
    }

    public static void main(String[] args) {
        // Example usage:
        int[] originalArray = {1, 2, 3, 4, 5};
        int elementToInsert = 99;
        int insertPosition = 2;

        // Insert the element at the specified position
        int[] newArray = insertElement(originalArray, elementToInsert, insertPosition);

        System.out.println("Original array: " + Arrays.toString(originalArray));
        System.out.println("Array after inserting " + elementToInsert + " at position " + insertPosition + ": "
                + Arrays.toString(newArray));
    }
}


*****Write a function to find the minimum and maximum value of an array.****
public class MinMaxArray {
    public static void findMinMax(int[] arr) {
        if (arr == null || arr.length == 0) {
            System.out.println("Array is empty or null.");
            return;
        }

        int min = arr[0];
        int max = arr[0];

        for (int i = 1; i < arr.length; i++) {
            if (arr[i] < min) {
                min = arr[i];
            } else if (arr[i] > max) {
                max = arr[i];
            }
        }

        System.out.println("Minimum value: " + min);
        System.out.println("Maximum value: " + max);
    }

    public static void main(String[] args) {
        // Example usage:
        int[] myArray = {4, 2, 8, 1, 5, 7};

        // Find and print the minimum and maximum values
        findMinMax(myArray);
    }
}

****Write a function to reverse an array of integer values.***
import java.util.Arrays;

public class ReverseArray {
    public static int[] reverse(int[] arr) {
        int[] reversedArray = new int[arr.length];

        for (int i = 0; i < arr.length; i++) {
            reversedArray[i] = arr[arr.length - 1 - i];
        }

        return reversedArray;
    }

    public static void main(String[] args) {
        // Example usage:
        int[] originalArray = {1, 2, 3, 4, 5};

        // Reverse the array
        int[] reversedArray = reverse(originalArray);

        System.out.println("Original array: " + Arrays.toString(originalArray));
        System.out.println("Reversed array: " + Arrays.toString(reversedArray));
    }
}

***Write a function to find the duplicate values of an array.***
import java.util.HashSet;

public class FindDuplicates {
    public static void findDuplicates(int[] arr) {
        HashSet<Integer> uniqueSet = new HashSet<>();
        HashSet<Integer> duplicateSet = new HashSet<>();

        for (int value : arr) {
            if (!uniqueSet.add(value)) {
                duplicateSet.add(value);
            }
        }

        System.out.println("Duplicate values in the array: " + duplicateSet);
    }

    public static void main(String[] args) {
        // Example usage:
        int[] myArray = {1, 2, 3, 2, 4, 5, 4, 6};

        // Find and print the duplicate values
        findDuplicates(myArray);
    }
}

**** Write a program to find the common values between two arrays***
import java.util.HashSet;

public class FindCommonValues {
    public static void findCommonValues(int[] arr1, int[] arr2) {
        HashSet<Integer> set1 = new HashSet<>();
        HashSet<Integer> commonSet = new HashSet<>();

        // Add elements from the first array to set1
        for (int value : arr1) {
            set1.add(value);
        }

        // Check for common elements with the second array
        for (int value : arr2) {
            if (set1.contains(value)) {
                commonSet.add(value);
            }
        }

        System.out.println("Common values between the two arrays: " + commonSet);
    }

    public static void main(String[] args) {
        // Example usage:
        int[] array1 = {1, 2, 3, 4, 5};
        int[] array2 = {3, 4, 5, 6, 7};

        // Find and print the common values
        findCommonValues(array1, array2);
    }
}

**** Write a method to remove duplicate elements from an array.***
import java.util.Arrays;
import java.util.LinkedHashSet;

public class RemoveDuplicatesFromArray {
    public static int[] removeDuplicates(int[] arr) {
        LinkedHashSet<Integer> uniqueSet = new LinkedHashSet<>();

        // Add elements to the LinkedHashSet to keep the order
        for (int value : arr) {
            uniqueSet.add(value);
        }

        // Convert the LinkedHashSet back to an array
        int[] resultArray = new int[uniqueSet.size()];
        int index = 0;
        for (int value : uniqueSet) {
            resultArray[index++] = value;
        }

        return resultArray;
    }

    public static void main(String[] args) {
        // Example usage:
        int[] arrayWithDuplicates = {1, 2, 3, 2, 4, 5, 4, 6};

        // Remove duplicates from the array
        int[] arrayWithoutDuplicates = removeDuplicates(arrayWithDuplicates);

        System.out.println("Original array with duplicates: " + Arrays.toString(arrayWithDuplicates));
        System.out.println("Array after removing duplicates: " + Arrays.toString(arrayWithoutDuplicates));
    }
}


***** Write a method to find the second largest number in an array. ****
public class SecondLargestNumber {
    public static int findSecondLargest(int[] arr) {
        if (arr == null || arr.length < 2) {
            throw new IllegalArgumentException("Array should have at least two elements.");
        }

        int firstLargest = Integer.MIN_VALUE;
        int secondLargest = Integer.MIN_VALUE;

        for (int num : arr) {
            if (num > firstLargest) {
                secondLargest = firstLargest;
                firstLargest = num;
            } else if (num > secondLargest && num < firstLargest) {
                secondLargest = num;
            }
        }

        if (secondLargest == Integer.MIN_VALUE) {
            throw new IllegalStateException("Second largest number not found.");
        }

        return secondLargest;
    }

    public static void main(String[] args) {
        // Example usage:
        int[] myArray = {5, 8, 2, 10, 7, 3};

        // Find and print the second largest number
        int secondLargest = findSecondLargest(myArray);
        System.out.println("Second largest number: " + secondLargest);
    }
}


******Write a method to find number of even number and odd numbers in an array.****
public class CountEvenOddNumbers {
    public static void countEvenOdd(int[] arr) {
        if (arr == null || arr.length == 0) {
            System.out.println("Array is empty or null.");
            return;
        }

        int evenCount = 0;
        int oddCount = 0;

        for (int num : arr) {
            if (num % 2 == 0) {
                evenCount++;
            } else {
                oddCount++;
            }
        }

        System.out.println("Number of even numbers: " + evenCount);
        System.out.println("Number of odd numbers: " + oddCount);
    }

    public static void main(String[] args) {
        // Example usage:
        int[] myArray = {1, 2, 3, 4, 5, 6, 7, 8, 9};

        // Count and print the number of even and odd numbers
        countEvenOdd(myArray);
    }
}


*****Write a function to get the difference of largest and smallest value.*****
public class DifferenceLargestSmallest {
    public static int getDifference(int[] arr) {
        if (arr == null || arr.length == 0) {
            throw new IllegalArgumentException("Array is empty or null.");
        }

        int min = arr[0];
        int max = arr[0];

        for (int num : arr) {
            if (num < min) {
                min = num;
            }
            if (num > max) {
                max = num;
            }
        }

        return max - min;
    }

    public static void main(String[] args) {
        // Example usage:
        int[] myArray = {5, 8, 2, 10, 7, 3};

        // Calculate and print the difference between the largest and smallest values
        int difference = getDifference(myArray);
        System.out.println("Difference between the largest and smallest values: " + difference);
    }
}



*****Write a method to verify if the array contains two specified elements(12,23) ***
public class ContainsSpecifiedElements {
    public static boolean containsElements(int[] arr, int element1, int element2) {
        if (arr == null || arr.length < 2) {
            return false;
        }

        boolean containsElement1 = false;
        boolean containsElement2 = false;

        for (int num : arr) {
            if (num == element1) {
                containsElement1 = true;
            } else if (num == element2) {
                containsElement2 = true;
            }

            // Break the loop if both elements are found
            if (containsElement1 && containsElement2) {
                break;
            }
        }

        return containsElement1 && containsElement2;
    }

    public static void main(String[] args) {
        // Example usage:
        int[] myArray = {5, 8, 12, 10, 7, 23};

        // Verify if the array contains both elements 12 and 23
        boolean containsBothElements = containsElements(myArray, 12, 23);

        if (containsBothElements) {
            System.out.println("The array contains both specified elements (12 and 23).");
        } else {
            System.out.println("The array does not contain both specified elements (12 and 23).");
        }
    }
}


****. Write a program to remove the duplicate elements and return the new array.***
import java.util.Arrays;
import java.util.HashSet;

public class RemoveDuplicatesFromArray {
    public static int[] removeDuplicates(int[] arr) {
        if (arr == null || arr.length == 0) {
            return arr; // Nothing to remove from an empty or null array
        }

        HashSet<Integer> uniqueSet = new HashSet<>();

        // Add elements to the HashSet to keep the order
        for (int value : arr) {
            uniqueSet.add(value);
        }

        // Convert the HashSet back to an array
        int[] resultArray = new int[uniqueSet.size()];
        int index = 0;
        for (int value : uniqueSet) {
            resultArray[index++] = value;
        }

        return resultArray;
    }

    public static void main(String[] args) {
        // Example usage:
        int[] arrayWithDuplicates = {1, 2, 3, 2, 4, 5, 4, 6};

        // Remove duplicates from the array and get the new array
        int[] arrayWithoutDuplicates = removeDuplicates(arrayWithDuplicates);

        System.out.println("Original array with duplicates: " + Arrays.toString(arrayWithDuplicates));
        System.out.println("Array after removing duplicates: " + Arrays.toString(arrayWithoutDuplicates));
    }
}

*****Write a function to find the missing number of sorted array of 1 to 100.*****
public class FindMissingNumber {
    public static int findMissingNumber(int[] sortedArray) {
        int n = 100; // assuming the array has numbers from 1 to 100
        int expectedSum = (n * (n + 1)) / 2; // sum of numbers from 1 to 100

        int actualSum = 0;
        for (int num : sortedArray) {
            actualSum += num;
        }

        return expectedSum - actualSum;
    }

    public static void main(String[] args) {
        // Example usage:
        int[] sortedArrayWithMissingNumber = {1, 2, 3, 4, 5, 6, 8, 9, 10, /* Missing Number: */ 7, 11, 12, /* ... */, 100};

        // Find and print the missing number
        int missingNumber = findMissingNumber(sortedArrayWithMissingNumber);
        System.out.println("The missing number is: " + missingNumber);
    }
}
