************* Create a class with PRIVATE fields, private method and a main method. Print the fields 
in main method. Call the private method in main method***********
private fields and methods are not directly accessible from subclasses. However, you can use getter methods to provide controlled access to private fields.
public class ParentClass {
    private int privateField1;
    private String privateField2;

    // Constructor to initialize private fields
    public ParentClass(int privateField1, String privateField2) {
        this.privateField1 = privateField1;
        this.privateField2 = privateField2;
    }

    // Private method
    private void privateMethod() {
        System.out.println("Inside privateMethod");
        System.out.println("Private Field 1: " + privateField1);
        System.out.println("Private Field 2: " + privateField2);
    }

    // Getter for privateField1
    public int getPrivateField1() {
        return privateField1;
    }

    // Getter for privateField2
    public String getPrivateField2() {
        return privateField2;
    }

    public static void main(String[] args) {
        // Create an instance of ParentClass
        ParentClass parentObject = new ParentClass(42, "Hello");

        // Print the private fields using getters
        System.out.println("Printing private fields in main method:");
        System.out.println("Private Field 1: " + parentObject.getPrivateField1());
        System.out.println("Private Field 2: " + parentObject.getPrivateField2());

        // Call the private method
        parentObject.privateMethod();

        // Create an instance of ChildClass and try to access private fields/methods
        ChildClass childObject = new ChildClass(55, "World");
        childObject.accessPrivateFieldsAndMethod();
    }
}

class ChildClass extends ParentClass {
    public ChildClass(int privateField1, String privateField2) {
        super(privateField1, privateField2);
    }

    public void accessPrivateFieldsAndMethod() {
        // Attempting to access private fields from the parent class
        // This will result in compilation errors
        // System.out.println("Private Field 1 in ChildClass: " + privateField1);
        // System.out.println("Private Field 2 in ChildClass: " + privateField2);

        // Attempting to call private method from the parent class
        // This will result in a compilation error
        // privateMethod();

        // Access private fields using getters
        System.out.println("Accessing private fields in ChildClass:");
        System.out.println("Private Field 1 in ChildClass: " + getPrivateField1());
        System.out.println("Private Field 2 in ChildClass: " + getPrivateField2());
    }
}

************** Create a class with DEFAULT fields and methods. Access these fields and methods 
from any other class in the same package*************
// Class with default (package-private) fields and methods
class DefaultClass {
    int defaultField1;
    String defaultField2;

    // Constructor to initialize default fields
    DefaultClass(int defaultField1, String defaultField2) {
        this.defaultField1 = defaultField1;
        this.defaultField2 = defaultField2;
    }

    // Default method
    void defaultMethod() {
        System.out.println("Inside defaultMethod");
        System.out.println("Default Field 1: " + defaultField1);
        System.out.println("Default Field 2: " + defaultField2);
    }
}

// Another class in the same package
public class AnotherClassInSamePackage {
    public static void main(String[] args) {
        // Create an instance of DefaultClass
        DefaultClass defaultObject = new DefaultClass(42, "Hello");

        // Access default fields directly from another class in the same package
        System.out.println("Accessing default fields from AnotherClassInSamePackage:");
        System.out.println("Default Field 1: " + defaultObject.defaultField1);
        System.out.println("Default Field 2: " + defaultObject.defaultField2);

        // Access default method directly from another class in the same package
        defaultObject.defaultMethod();
    }
}

************ Create a class with PROTECTED fields and methods. Access these fields and methods 
from any other class in the same package. 
Also, Access the PROTECTED fields and methods from child class located in a different 
package
Access the PROTECTED fields and methods from any class in different package*****************
// Class with protected fields and methods
public class ProtectedClass {
    protected int protectedField1;
    protected String protectedField2;

    // Constructor to initialize protected fields
    protected ProtectedClass(int protectedField1, String protectedField2) {
        this.protectedField1 = protectedField1;
        this.protectedField2 = protectedField2;
    }

    // Protected method
    protected void protectedMethod() {
        System.out.println("Inside protectedMethod");
        System.out.println("Protected Field 1: " + protectedField1);
        System.out.println("Protected Field 2: " + protectedField2);
    }
}
// Another class in the same package
class AnotherClassInSamePackage {
    public static void main(String[] args) {
        // Create an instance of ProtectedClass
        ProtectedClass protectedObject = new ProtectedClass(42, "Hello");

        // Access protected fields directly from another class in the same package
        System.out.println("Accessing protected fields from AnotherClassInSamePackage:");
        System.out.println("Protected Field 1: " + protectedObject.protectedField1);
        System.out.println("Protected Field 2: " + protectedObject.protectedField2);

        // Access protected method directly from another class in the same package
        protectedObject.protectedMethod();
    }
}

// Child class in a different package
class ChildClass extends ProtectedClass {
    public ChildClass(int protectedField1, String protectedField2) {
        super(protectedField1, protectedField2);
    }

    // Access protected fields and methods in a child class in a different package
    public void accessProtectedMembersFromChild() {
        System.out.println("Accessing protected members from ChildClass in a different package:");
        System.out.println("Protected Field 1: " + protectedField1);
        System.out.println("Protected Field 2: " + protectedField2);
        protectedMethod();
    }
}

// Another class in a different package
public class AnotherClassInDifferentPackage {
    public static void main(String[] args) {
        // Create an instance of ChildClass (which extends ProtectedClass)
        ChildClass childObject = new ChildClass(55, "World");

        // Access protected fields and methods from a child class in a different package
        System.out.println("Accessing protected members from AnotherClassInDifferentPackage:");
        System.out.println("Protected Field 1: " + childObject.protectedField1);
        System.out.println("Protected Field 2: " + childObject.protectedField2);
        childObject.protectedMethod();
    }
}

**************** Create a class with PUBLIC fields and methods. 
Access the public methods and fields from any class in the same package or different 
package**************
// Class with public fields and methods
public class PublicClass {
    public int publicField1;
    public String publicField2;

    // Constructor to initialize public fields
    public PublicClass(int publicField1, String publicField2) {
        this.publicField1 = publicField1;
        this.publicField2 = publicField2;
    }

    // Public method
    public void publicMethod() {
        System.out.println("Inside publicMethod");
        System.out.println("Public Field 1: " + publicField1);
        System.out.println("Public Field 2: " + publicField2);
    }
}
// Another class in the same package
class AnotherClassInSamePackage {
    public static void main(String[] args) {
        // Create an instance of PublicClass
        PublicClass publicObject = new PublicClass(42, "Hello");

        // Access public fields directly from another class in the same package
        System.out.println("Accessing public fields from AnotherClassInSamePackage:");
        System.out.println("Public Field 1: " + publicObject.publicField1);
        System.out.println("Public Field 2: " + publicObject.publicField2);

        // Access public method directly from another class in the same package
        publicObject.publicMethod();
    }
}
// Another class in a different package
public class AnotherClassInDifferentPackage {
    public static void main(String[] args) {
        // Create an instance of PublicClass
        PublicClass publicObject = new PublicClass(55, "World");

        // Access public fields directly from another class in a different package
        System.out.println("Accessing public fields from AnotherClassInDifferentPackage:");
        System.out.println("Public Field 1: " + publicObject.publicField1);
        System.out.println("Public Field 2: " + publicObject.publicField2);

        // Access public method directly from another class in a different package
        publicObject.publicMethod();
    }
}
