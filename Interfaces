********** Create an interface with only one method and implement it in a class. Call the method 
implemented.************
// Interface with a single method
interface MyInterface {
    void myMethod();
}
class MyClass implements MyInterface {   
    @Override
    public void myMethod() {
        System.out.println("Calling myMethod() implementation in MyClass.");
    }
}
public class Main {
    public static void main(String[] args) {
        MyClass myObject = new MyClass();
        myObject.myMethod();
    }
}

********** Create an interface with two methods, but implement only one in a class. Call the 
method implemented.************

// Interface with two methods
interface MyInterface {
    void printHello();

    void printGoodbye();
}

// Class implementing the interface with only one method
class MyClass implements MyInterface {
    // Implementation of the first method
    @Override
    public void printHello() {
        System.out.println("Hello from MyClass!");
    }

    // The second method is not implemented in this class
}

public class Main {
    public static void main(String[] args) {
        // Create an instance of the class
        MyClass myObject = new MyClass();

        // Call the implemented method in the class through the interface
        myObject.printHello();

        // Attempting to call the unimplemented method will result in a compilation error
        // myObject.printGoodbye(); // Uncommenting this line will result in a compilation error
    }
}

*********Use Interface instances to call the implemented method in the implemented class*******
// Interface with two methods
interface MyInterface {
    void playSound();

    void displayMessage();
}

// Class implementing the interface with only one method
class MusicPlayer implements MyInterface {
    // Implementation of the first method
    @Override
    public void playSound() {
        System.out.println("Playing music...");
    }

    // The second method is not implemented in this class
}

public class Main {
    public static void main(String[] args) {
        // Create an instance of the class
        MusicPlayer myMusicPlayer = new MusicPlay
MyInterface myInterfaceInstance = myMusicPlayer;
        myInterfaceInstance.playSound();
}
}

********* Create two interfaces with one method each. Implement these two interfaces in one 
class. *******
// First interface with one method
interface Interface1 {
    void method1();
}

// Second interface with one method
interface Interface2 {
    void method2();
}

// Class implementing both interfaces
class MyClass implements Interface1, Interface2 {
    // Implementation of the method from Interface1
    @Override
    public void method1() {
        System.out.println("Implementation of method1");
    }

    // Implementation of the method from Interface2
    @Override
    public void method2() {
        System.out.println("Implementation of method2");
    }
}

public class Main {
    public static void main(String[] args) {
        // Create an instance of the class
        MyClass myObject = new MyClass();

        // Call the methods implemented in the class through the interfaces
        myObject.method1();
        myObject.method2();
    }
}

*********Create two interfaces with the same method (same signature) in both the interfaces. 
Implement these two interfaces in one class. Call the method *********
// First interface with a method
interface Interface1 {
    void commonMethod();
}

// Second interface with the same method signature
interface Interface2 {
    void commonMethod();
}

// Class implementing both interfaces
class MyClass implements Interface1, Interface2 {
    // Implementation of the common method
    @Override
    public void commonMethod() {
        System.out.println("Implementation of commonMethod");
    }
}

public class Main {
    public static void main(String[] args) {
        // Create an instance of the class
        MyClass myObject = new MyClass();

        // Call the common method implemented in the class through the interfaces
        myObject.commonMethod();
    }
}

***************  Create an interface with a default method and implement it in a class. Do not provide 
implementation to the default method and call the method.******
// Interface with a default method
interface Printable {
    // Abstract method
    void print();

    // Default method with a default implementation
    default void defaultPrint() {
        System.out.println("Default implementation of defaultPrint in Printable");
    }
}

// Class implementing the interface without providing an implementation for the default method
class Printer implements Printable {
    // Implementation of the abstract method
    @Override
    public void print() {
        System.out.println("Printing from Printer class");
    }
}

public class Main {
    public static void main(String[] args) {
        // Create an instance of the class
        Printer printer = new Printer();

        // Call the implemented method in the class
        printer.print();

        // Call the default method from the interface
        printer.defaultPrint();
    }
}


*******Create an interface and inherit it from the other interface.
*****
// Parent interface
interface Shape {
    void draw();
}

// Child interface inheriting from the parent interface
interface ColoredShape extends Shape {
    String getColor();
}

// Class implementing the child interface
class Circle implements ColoredShape {
    private String color;

    // Constructor
    public Circle(String color) {
        this.color = color;
    }

    // Implementation of the draw method from the parent interface
    @Override
    public void draw() {
        System.out.println("Drawing a " + color + " circle.");
    }

    // Implementation of the getColor method from the child interface
    @Override
    public String getColor() {
        return color;
    }
}

public class Main {
    public static void main(String[] args) {
        // Create an instance of the class
        Circle coloredCircle = new Circle("red");

        // Call the methods from both interfaces
        coloredCircle.draw();
        System.out.println("Color: " + coloredCircle.getColor());
    }
}


********* Create a PUBLIC interface with fields and methods, fields should have values assigned. 
Implement this interface to some class and print the values of the interface fields and 
call the interface methods***************
// Public interface with fields and methods
public interface MyInterface {
    // Public, static, final fields with assigned values
    String NAME = "MyInterface";
    int VALUE = 42;

    // Abstract method
    void displayInfo();
}

// Class implementing the public interface
class MyClass implements MyInterface {
    // Implementation of the abstract method
    @Override
    public void displayInfo() {
        System.out.println("Name: " + NAME);
        System.out.println("Value: " + VALUE);
    }
}

public class Main {
    public static void main(String[] args) {
        // Create an instance of the class
        MyClass myObject = new MyClass();

        // Access and print the values of interface fields
        System.out.println("Interface Field - NAME: " + MyInterface.NAME);
        System.out.println("Interface Field - VALUE: " + MyInterface.VALUE);

        // Call the method implemented in the class through the interface
        myObject.displayInfo();
    }
}
*********Create an interface with private, public and protected fields.************
// Interface with private, public, and protected fields 
public interface MyInterface {
    // Public, static, final field
    String PUBLIC_FIELD = "Public Field";

    // Public, static, final field with a default value
    int PUBLIC_FIELD_WITH_DEFAULT = 42;

    // Public abstract method
    void publicMethod();

    // Private method with implementation
    private void privateMethod() {
        System.out.println("Private method in MyInterface");
    }

    // Default method accessing the private method
    default void callPrivateMethod() {
        System.out.println("Calling private method from default method:");
        privateMethod();
    }

    // Static method with implementation
    static void staticMethod() {
        System.out.println("Static method in MyInterface");
    }

    // Protected abstract method (not allowed in Java interfaces, shown for reference)
    // protected void protectedMethod();
}

// Class implementing the interface
class MyClass implements MyInterface {
    // Implementation of the public abstract method
    @Override
    public void publicMethod() {
        System.out.println("Implementation of publicMethod in MyClass");
    }
}

public class Main {
    public static void main(String[] args) {
        // Create an instance of the class
        MyClass myObject = new MyClass();

        // Access and print the values of the public fields
        System.out.println("Public Field: " + MyInterface.PUBLIC_FIELD);
        System.out.println("Public Field with Default Value: " + MyInterface.PUBLIC_FIELD_WITH_DEFAULT);

        // Call the public abstract method
        myObject.publicMethod();

        // Call the default method in the interface
        myObject.callPrivateMethod();

        // Call the static method in the interface
        MyInterface.staticMethod();
    }
}
*********** Create an interface with static final variable*********
// Interface with a static final variable
public interface MyInterface {
    // Implicitly public, static, final variable
    String CONSTANT_VARIABLE = "Constant Value";

    // Abstract method
    void someMethod();

    // Default method
    default void defaultMethod() {
        System.out.println("Default method in MyInterface");
    }

    // Static method
    static void staticMethod() {
        System.out.println("Static method in MyInterface");
    }
}

// Class implementing the interface
class MyClass implements MyInterface {
    // Implementation of the abstract method
    @Override
    public void someMethod() {
        System.out.println("Implementation of someMethod in MyClass");
    }
}

public class Main {
    public static void main(String[] args) {
        // Access and print the value of the static final variable
        System.out.println("Constant Variable: " + MyInterface.CONSTANT_VARIABLE);

        // Create an instance of the class
        MyClass myObject = new MyClass();

        // Call the abstract method
        myObject.someMethod();

        // Call the default and static methods in the interface
        myObject.defaultMethod();
        MyInterface.staticMethod();
    }
}


